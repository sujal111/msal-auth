{"ast":null,"code":"/*! @azure/msal-browser v2.34.0 2023-03-07 */\n'use strict';\n\nimport { __spread, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { KEY_FORMAT_JWK } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar MsrBrowserCrypto = /** @class */function () {\n  function MsrBrowserCrypto() {}\n  MsrBrowserCrypto.prototype.initPrng = function (entropy) {\n    // Turn into array, as initPrng seems to not always like Uint8Array (even though it should support both)\n    return window.msrCrypto.initPrng(__spread(entropy));\n  };\n  MsrBrowserCrypto.prototype.getRandomValues = function (dataBuffer) {\n    return window.msrCrypto.getRandomValues(dataBuffer);\n  };\n  MsrBrowserCrypto.prototype.generateKey = function (algorithm, extractable, keyUsages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, window.msrCrypto.subtle.generateKey(algorithm, extractable, keyUsages)];\n      });\n    });\n  };\n  MsrBrowserCrypto.prototype.exportKey = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, window.msrCrypto.subtle.exportKey(KEY_FORMAT_JWK, key)];\n      });\n    });\n  };\n  MsrBrowserCrypto.prototype.importKey = function (keyData, algorithm, extractable, keyUsages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, window.msrCrypto.subtle.importKey(KEY_FORMAT_JWK, keyData, algorithm, extractable, keyUsages)];\n      });\n    });\n  };\n  MsrBrowserCrypto.prototype.sign = function (algorithm, key, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, window.msrCrypto.subtle.sign(algorithm, key, data)];\n      });\n    });\n  };\n  MsrBrowserCrypto.prototype.digest = function (algorithm, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, window.msrCrypto.subtle.digest(algorithm, data)];\n      });\n    });\n  };\n  return MsrBrowserCrypto;\n}();\nexport { MsrBrowserCrypto };","map":{"version":3,"names":["MsrBrowserCrypto","prototype","initPrng","entropy","window","msrCrypto","__spread","getRandomValues","dataBuffer","generateKey","algorithm","extractable","keyUsages","subtle","exportKey","key","KEY_FORMAT_JWK","importKey","keyData","sign","data","digest"],"sources":["/Users/sujal/Desktop/MSAL/msal-react-tutorial/node_modules/@azure/msal-browser/src/crypto/MsrBrowserCrypto.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { KEY_FORMAT_JWK } from \"../utils/BrowserConstants\";\nimport { ISubtleCrypto } from \"./ISubtleCrypto\";\n\ndeclare global {\n    interface Window {\n        msrCrypto: Crypto & {\n            initPrng: (entropy: Uint8Array | number[]) => void\n        }\n    }\n}\n\nexport class MsrBrowserCrypto implements ISubtleCrypto {\n    initPrng(entropy : Uint8Array): void {\n        // Turn into array, as initPrng seems to not always like Uint8Array (even though it should support both)\n        return window.msrCrypto.initPrng([...entropy]);\n    }\n\n    getRandomValues(dataBuffer: Uint8Array): Uint8Array {\n        return window.msrCrypto.getRandomValues(dataBuffer);\n    }\n\n    async generateKey(algorithm: RsaHashedKeyGenParams, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKeyPair> {\n        return window.msrCrypto.subtle.generateKey(algorithm, extractable, keyUsages) as Promise<CryptoKeyPair>;\n    }\n\n    async exportKey(key: CryptoKey): Promise<JsonWebKey> {\n        return window.msrCrypto.subtle.exportKey(KEY_FORMAT_JWK, key) as Promise<JsonWebKey> as Promise<JsonWebKey>;\n    }\n\n    async importKey(keyData: JsonWebKey, algorithm: RsaHashedImportParams, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey> {\n        return window.msrCrypto.subtle.importKey(KEY_FORMAT_JWK, keyData, algorithm, extractable, keyUsages) as Promise<CryptoKey>;\n    }\n\n    async sign(algorithm: AlgorithmIdentifier, key: CryptoKey, data: ArrayBuffer): Promise<ArrayBuffer> {\n        return window.msrCrypto.subtle.sign(algorithm, key, data) as Promise<ArrayBuffer>;\n    }\n\n    async digest(algorithm: AlgorithmIdentifier, data: Uint8Array): Promise<ArrayBuffer> {\n        return window.msrCrypto.subtle.digest(algorithm, data) as Promise<ArrayBuffer>; \n    }\n}\n"],"mappings":";;;;;;AAAA;;;;;EAgBA,SAAAA,iBAAA,G;EACIA,gBAAA,CAAAC,SAAA,CAAAC,QAAQ,GAAR,UAASC,OAAoB;;IAEzB,OAAOC,MAAM,CAACC,SAAS,CAACH,QAAQ,CAAAI,QAAA,CAAKH,OAAO,EAAE;GACjD;EAEDH,gBAAA,CAAAC,SAAA,CAAAM,eAAe,GAAf,UAAgBC,UAAsB;IAClC,OAAOJ,MAAM,CAACC,SAAS,CAACE,eAAe,CAACC,UAAU,CAAC;GACtD;EAEKR,gBAAA,CAAAC,SAAA,CAAAQ,WAAW,GAAjB,UAAkBC,SAAgC,EAAEC,WAAoB,EAAEC,SAAqB;;;QAC3F,sBAAOR,MAAM,CAACC,SAAS,CAACQ,MAAM,CAACJ,WAAW,CAACC,SAAS,EAAEC,WAAW,EAAEC,SAAS,CAA2B;;;GAC1G;EAEKZ,gBAAA,CAAAC,SAAA,CAAAa,SAAS,GAAf,UAAgBC,GAAc;;;QAC1B,sBAAOX,MAAM,CAACC,SAAS,CAACQ,MAAM,CAACC,SAAS,CAACE,cAAc,EAAED,GAAG,CAA+C;;;GAC9G;EAEKf,gBAAA,CAAAC,SAAA,CAAAgB,SAAS,GAAf,UAAgBC,OAAmB,EAAER,SAAgC,EAAEC,WAAoB,EAAEC,SAAqB;;;QAC9G,sBAAOR,MAAM,CAACC,SAAS,CAACQ,MAAM,CAACI,SAAS,CAACD,cAAc,EAAEE,OAAO,EAAER,SAAS,EAAEC,WAAW,EAAEC,SAAS,CAAuB;;;GAC7H;EAEKZ,gBAAA,CAAAC,SAAA,CAAAkB,IAAI,GAAV,UAAWT,SAA8B,EAAEK,GAAc,EAAEK,IAAiB;;;QACxE,sBAAOhB,MAAM,CAACC,SAAS,CAACQ,MAAM,CAACM,IAAI,CAACT,SAAS,EAAEK,GAAG,EAAEK,IAAI,CAAyB;;;GACpF;EAEKpB,gBAAA,CAAAC,SAAA,CAAAoB,MAAM,GAAZ,UAAaX,SAA8B,EAAEU,IAAgB;;;QACzD,sBAAOhB,MAAM,CAACC,SAAS,CAACQ,MAAM,CAACQ,MAAM,CAACX,SAAS,EAAEU,IAAI,CAAyB;;;GACjF;EACL,OAAApB,gBAAC;AAAD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}