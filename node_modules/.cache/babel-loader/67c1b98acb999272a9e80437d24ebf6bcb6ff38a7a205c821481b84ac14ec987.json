{"ast":null,"code":"/*! @azure/msal-browser v2.34.0 2023-03-07 */\n'use strict';\n\nimport { __extends, __assign } from '../_virtual/_tslib.js';\nimport { PerformanceClient } from '@azure/msal-common';\nimport { BrowserCrypto } from '../crypto/BrowserCrypto.js';\nimport { GuidGenerator } from '../crypto/GuidGenerator.js';\nimport { BrowserPerformanceMeasurement } from './BrowserPerformanceMeasurement.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar BrowserPerformanceClient = /** @class */function (_super) {\n  __extends(BrowserPerformanceClient, _super);\n  function BrowserPerformanceClient(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry, cryptoOptions) {\n    var _this = _super.call(this, clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry) || this;\n    _this.browserCrypto = new BrowserCrypto(_this.logger, cryptoOptions);\n    _this.guidGenerator = new GuidGenerator(_this.browserCrypto);\n    return _this;\n  }\n  BrowserPerformanceClient.prototype.startPerformanceMeasuremeant = function (measureName, correlationId) {\n    return new BrowserPerformanceMeasurement(measureName, correlationId);\n  };\n  BrowserPerformanceClient.prototype.generateId = function () {\n    return this.guidGenerator.generateGuid();\n  };\n  BrowserPerformanceClient.prototype.getPageVisibility = function () {\n    var _a;\n    return ((_a = document.visibilityState) === null || _a === void 0 ? void 0 : _a.toString()) || null;\n  };\n  BrowserPerformanceClient.prototype.deleteIncompleteSubMeasurements = function (inProgressEvent) {\n    var rootEvent = this.eventsByCorrelationId.get(inProgressEvent.event.correlationId);\n    var isRootEvent = rootEvent && rootEvent.eventId === inProgressEvent.event.eventId;\n    var incompleteMeasurements = [];\n    if (isRootEvent && (rootEvent === null || rootEvent === void 0 ? void 0 : rootEvent.incompleteSubMeasurements)) {\n      rootEvent.incompleteSubMeasurements.forEach(function (subMeasurement) {\n        incompleteMeasurements.push(__assign({}, subMeasurement));\n      });\n    }\n    // Clean up remaining marks for incomplete sub-measurements\n    if (incompleteMeasurements.length > 0) {\n      BrowserPerformanceMeasurement.flushMeasurements(inProgressEvent.event.correlationId, incompleteMeasurements);\n    }\n  };\n  BrowserPerformanceClient.prototype.supportsBrowserPerformanceNow = function () {\n    return typeof window !== \"undefined\" && typeof window.performance !== \"undefined\" && typeof window.performance.now === \"function\";\n  };\n  /**\r\n   * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n   * Also captures browser page visibilityState.\r\n   *\r\n   * @param {PerformanceEvents} measureName\r\n   * @param {?string} [correlationId]\r\n   * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\r\n   */\n  BrowserPerformanceClient.prototype.startMeasurement = function (measureName, correlationId) {\n    var _this = this;\n    // Capture page visibilityState and then invoke start/end measurement\n    var startPageVisibility = this.getPageVisibility();\n    var inProgressEvent = _super.prototype.startMeasurement.call(this, measureName, correlationId);\n    return __assign(__assign({}, inProgressEvent), {\n      endMeasurement: function (event) {\n        var res = inProgressEvent.endMeasurement(__assign({\n          startPageVisibility: startPageVisibility,\n          endPageVisibility: _this.getPageVisibility()\n        }, event));\n        _this.deleteIncompleteSubMeasurements(inProgressEvent);\n        return res;\n      },\n      discardMeasurement: function () {\n        inProgressEvent.discardMeasurement();\n        _this.deleteIncompleteSubMeasurements(inProgressEvent);\n        inProgressEvent.measurement.flushMeasurement();\n      }\n    });\n  };\n  /**\r\n   * Adds pre-queue time to preQueueTimeByCorrelationId map.\r\n   * @param {PerformanceEvents} eventName\r\n   * @param {?string} correlationId\r\n   * @returns\r\n   */\n  BrowserPerformanceClient.prototype.setPreQueueTime = function (eventName, correlationId) {\n    if (!this.supportsBrowserPerformanceNow()) {\n      this.logger.trace(\"BrowserPerformanceClient: window performance API not available, unable to set telemetry queue time for \" + eventName);\n      return;\n    }\n    if (!correlationId) {\n      this.logger.trace(\"BrowserPerformanceClient: correlationId for \" + eventName + \" not provided, unable to set telemetry queue time\");\n      return;\n    }\n    var preQueueEvent = this.preQueueTimeByCorrelationId.get(correlationId);\n    /**\r\n     * Manually complete queue measurement if there is an incomplete pre-queue event.\r\n     * Incomplete pre-queue events are instrumentation bugs that should be fixed.\r\n     */\n    if (preQueueEvent) {\n      this.logger.trace(\"BrowserPerformanceClient: Incomplete pre-queue \" + preQueueEvent.name + \" found\", correlationId);\n      this.addQueueMeasurement(preQueueEvent.name, correlationId, undefined, true);\n    }\n    this.preQueueTimeByCorrelationId.set(eventName, {\n      name: eventName,\n      time: window.performance.now()\n    });\n  };\n  /**\r\n   * Calculates and adds queue time measurement for given performance event.\r\n   *\r\n   * @param {PerformanceEvents} eventName\r\n   * @param {?string} correlationId\r\n   * @param {?number} queueTime\r\n   * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\r\n   * @returns\r\n   */\n  BrowserPerformanceClient.prototype.addQueueMeasurement = function (eventName, correlationId, queueTime, manuallyCompleted) {\n    if (!this.supportsBrowserPerformanceNow()) {\n      this.logger.trace(\"BrowserPerformanceClient: window performance API not available, unable to add queue measurement for \" + eventName);\n      return;\n    }\n    if (!correlationId) {\n      this.logger.trace(\"BrowserPerformanceClient: correlationId for \" + eventName + \" not provided, unable to add queue measurement\");\n      return;\n    }\n    var preQueueTime = _super.prototype.getPreQueueTime.call(this, eventName, correlationId);\n    if (!preQueueTime) {\n      return;\n    }\n    var currentTime = window.performance.now();\n    var resQueueTime = queueTime || _super.prototype.calculateQueuedTime.call(this, preQueueTime, currentTime);\n    return _super.prototype.addQueueMeasurement.call(this, eventName, correlationId, resQueueTime, manuallyCompleted);\n  };\n  return BrowserPerformanceClient;\n}(PerformanceClient);\nexport { BrowserPerformanceClient };","map":{"version":3,"names":["__extends","BrowserPerformanceClient","_super","clientId","authority","logger","libraryName","libraryVersion","applicationTelemetry","cryptoOptions","_this","call","browserCrypto","BrowserCrypto","guidGenerator","GuidGenerator","prototype","startPerformanceMeasuremeant","measureName","correlationId","BrowserPerformanceMeasurement","generateId","generateGuid","getPageVisibility","_a","document","visibilityState","toString","deleteIncompleteSubMeasurements","inProgressEvent","rootEvent","eventsByCorrelationId","get","event","isRootEvent","eventId","incompleteMeasurements","incompleteSubMeasurements","forEach","subMeasurement","push","__assign","length","flushMeasurements","supportsBrowserPerformanceNow","window","performance","now","startMeasurement","startPageVisibility","endMeasurement","res","endPageVisibility","discardMeasurement","measurement","flushMeasurement","setPreQueueTime","eventName","trace","preQueueEvent","preQueueTimeByCorrelationId","name","addQueueMeasurement","undefined","set","time","queueTime","manuallyCompleted","preQueueTime","getPreQueueTime","currentTime","resQueueTime","calculateQueuedTime","PerformanceClient"],"sources":["/Users/sujal/Desktop/MSAL/msal-react-tutorial/node_modules/@azure/msal-browser/src/telemetry/BrowserPerformanceClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Logger,\n    PerformanceEvent,\n    PerformanceEvents,\n    IPerformanceClient,\n    PerformanceClient,\n    IPerformanceMeasurement,\n    InProgressPerformanceEvent,\n    ApplicationTelemetry,\n    SubMeasurement,\n    PreQueueEvent\n} from \"@azure/msal-common\";\nimport { CryptoOptions } from \"../config/Configuration\";\nimport { BrowserCrypto } from \"../crypto/BrowserCrypto\";\nimport { GuidGenerator } from \"../crypto/GuidGenerator\";\nimport { BrowserPerformanceMeasurement } from \"./BrowserPerformanceMeasurement\";\n\nexport class BrowserPerformanceClient extends PerformanceClient implements IPerformanceClient {\n    private browserCrypto: BrowserCrypto;\n    private guidGenerator: GuidGenerator;\n\n    constructor(clientId: string, authority: string, logger: Logger, libraryName: string, libraryVersion: string, applicationTelemetry: ApplicationTelemetry, cryptoOptions: CryptoOptions) {\n        super(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry);\n        this.browserCrypto = new BrowserCrypto(this.logger, cryptoOptions);\n        this.guidGenerator = new GuidGenerator(this.browserCrypto);\n    }\n\n    startPerformanceMeasuremeant(measureName: string, correlationId: string): IPerformanceMeasurement {\n        return new BrowserPerformanceMeasurement(measureName, correlationId);\n    }\n\n    generateId() : string {\n        return this.guidGenerator.generateGuid();\n    }\n\n    private getPageVisibility(): string | null {\n        return document.visibilityState?.toString() || null;\n    }\n\n    private deleteIncompleteSubMeasurements(inProgressEvent: InProgressPerformanceEvent): void {\n        const rootEvent = this.eventsByCorrelationId.get(inProgressEvent.event.correlationId);\n        const isRootEvent = rootEvent && rootEvent.eventId === inProgressEvent.event.eventId;\n        const incompleteMeasurements: SubMeasurement[] = [];\n        if (isRootEvent && rootEvent?.incompleteSubMeasurements) {\n            rootEvent.incompleteSubMeasurements.forEach((subMeasurement) => {\n                incompleteMeasurements.push({...subMeasurement});\n            });\n        }\n        // Clean up remaining marks for incomplete sub-measurements\n        if (incompleteMeasurements.length > 0) {\n            BrowserPerformanceMeasurement.flushMeasurements(inProgressEvent.event.correlationId, incompleteMeasurements);\n        }\n    }\n\n    supportsBrowserPerformanceNow(): boolean {\n        return typeof window !== \"undefined\" &&\n            typeof window.performance !== \"undefined\" &&\n            typeof window.performance.now === \"function\";\n    }\n\n    /**\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\n     * Also captures browser page visibilityState.\n     *\n     * @param {PerformanceEvents} measureName\n     * @param {?string} [correlationId]\n     * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\n     */\n    startMeasurement(measureName: PerformanceEvents, correlationId?: string): InProgressPerformanceEvent {\n        // Capture page visibilityState and then invoke start/end measurement\n        const startPageVisibility = this.getPageVisibility();\n\n        const inProgressEvent = super.startMeasurement(measureName, correlationId);\n\n        return {\n            ...inProgressEvent,\n            endMeasurement: (event?: Partial<PerformanceEvent>): PerformanceEvent | null => {\n                const res = inProgressEvent.endMeasurement({\n                    startPageVisibility,\n                    endPageVisibility: this.getPageVisibility(),\n                    ...event\n                });\n                this.deleteIncompleteSubMeasurements(inProgressEvent);\n\n                return res;\n            },\n            discardMeasurement: () => {\n                inProgressEvent.discardMeasurement();\n                this.deleteIncompleteSubMeasurements(inProgressEvent);\n                inProgressEvent.measurement.flushMeasurement();\n            }\n        };\n    }\n\n    /**\n     * Adds pre-queue time to preQueueTimeByCorrelationId map.\n     * @param {PerformanceEvents} eventName\n     * @param {?string} correlationId\n     * @returns\n     */\n    setPreQueueTime(eventName: PerformanceEvents, correlationId?: string): void {\n        if (!this.supportsBrowserPerformanceNow()) {\n            this.logger.trace(`BrowserPerformanceClient: window performance API not available, unable to set telemetry queue time for ${eventName}`);\n            return;\n        }\n\n        if (!correlationId) {\n            this.logger.trace(`BrowserPerformanceClient: correlationId for ${eventName} not provided, unable to set telemetry queue time`);\n            return;\n        }\n\n        const preQueueEvent: PreQueueEvent | undefined = this.preQueueTimeByCorrelationId.get(correlationId);\n        /**\n         * Manually complete queue measurement if there is an incomplete pre-queue event.\n         * Incomplete pre-queue events are instrumentation bugs that should be fixed.\n         */\n        if (preQueueEvent) {\n            this.logger.trace(`BrowserPerformanceClient: Incomplete pre-queue ${preQueueEvent.name} found`, correlationId);\n            this.addQueueMeasurement(preQueueEvent.name, correlationId, undefined, true);\n        }\n        this.preQueueTimeByCorrelationId.set(eventName, { name: eventName, time: window.performance.now() });\n    }\n\n    /**\n     * Calculates and adds queue time measurement for given performance event.\n     *\n     * @param {PerformanceEvents} eventName\n     * @param {?string} correlationId\n     * @param {?number} queueTime\n     * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\n     * @returns\n     */\n    addQueueMeasurement(eventName: PerformanceEvents, correlationId?: string, queueTime?: number, manuallyCompleted?: boolean): void {\n        if (!this.supportsBrowserPerformanceNow()) {\n            this.logger.trace(`BrowserPerformanceClient: window performance API not available, unable to add queue measurement for ${eventName}`);\n            return;\n        }\n\n        if (!correlationId) {\n            this.logger.trace(`BrowserPerformanceClient: correlationId for ${eventName} not provided, unable to add queue measurement`);\n            return;\n        }\n\n        const preQueueTime = super.getPreQueueTime(eventName, correlationId);\n        if (!preQueueTime) {\n            return;\n        }\n\n        const currentTime = window.performance.now();\n        const resQueueTime = queueTime || super.calculateQueuedTime(preQueueTime, currentTime);\n\n        return super.addQueueMeasurement(eventName, correlationId, resQueueTime, manuallyCompleted);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}