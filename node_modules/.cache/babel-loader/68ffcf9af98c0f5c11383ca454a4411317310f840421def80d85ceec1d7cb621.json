{"ast":null,"code":"/*! @azure/msal-browser v2.34.0 2023-03-07 */\n'use strict';\n\nimport { EventType } from './EventType.js';\nimport { InteractionType, InteractionStatus } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar EventMessageUtils = /** @class */function () {\n  function EventMessageUtils() {}\n  /**\r\n   * Gets interaction status from event message\r\n   * @param message\r\n   * @param currentStatus\r\n   */\n  EventMessageUtils.getInteractionStatusFromEvent = function (message, currentStatus) {\n    switch (message.eventType) {\n      case EventType.LOGIN_START:\n        return InteractionStatus.Login;\n      case EventType.SSO_SILENT_START:\n        return InteractionStatus.SsoSilent;\n      case EventType.ACQUIRE_TOKEN_START:\n        if (message.interactionType === InteractionType.Redirect || message.interactionType === InteractionType.Popup) {\n          return InteractionStatus.AcquireToken;\n        }\n        break;\n      case EventType.HANDLE_REDIRECT_START:\n        return InteractionStatus.HandleRedirect;\n      case EventType.LOGOUT_START:\n        return InteractionStatus.Logout;\n      case EventType.SSO_SILENT_SUCCESS:\n      case EventType.SSO_SILENT_FAILURE:\n        if (currentStatus && currentStatus !== InteractionStatus.SsoSilent) {\n          // Prevent this event from clearing any status other than ssoSilent\n          break;\n        }\n        return InteractionStatus.None;\n      case EventType.LOGOUT_END:\n        if (currentStatus && currentStatus !== InteractionStatus.Logout) {\n          // Prevent this event from clearing any status other than logout\n          break;\n        }\n        return InteractionStatus.None;\n      case EventType.HANDLE_REDIRECT_END:\n        if (currentStatus && currentStatus !== InteractionStatus.HandleRedirect) {\n          // Prevent this event from clearing any status other than handleRedirect\n          break;\n        }\n        return InteractionStatus.None;\n      case EventType.LOGIN_SUCCESS:\n      case EventType.LOGIN_FAILURE:\n      case EventType.ACQUIRE_TOKEN_SUCCESS:\n      case EventType.ACQUIRE_TOKEN_FAILURE:\n        if (message.interactionType === InteractionType.Redirect || message.interactionType === InteractionType.Popup) {\n          if (currentStatus && currentStatus !== InteractionStatus.Login && currentStatus !== InteractionStatus.AcquireToken) {\n            // Prevent this event from clearing any status other than login or acquireToken\n            break;\n          }\n          return InteractionStatus.None;\n        }\n        break;\n    }\n    return null;\n  };\n  return EventMessageUtils;\n}();\nexport { EventMessageUtils };","map":{"version":3,"names":["EventMessageUtils","getInteractionStatusFromEvent","message","currentStatus","eventType","EventType","LOGIN_START","InteractionStatus","Login","SSO_SILENT_START","SsoSilent","ACQUIRE_TOKEN_START","interactionType","InteractionType","Redirect","Popup","AcquireToken","HANDLE_REDIRECT_START","HandleRedirect","LOGOUT_START","Logout","SSO_SILENT_SUCCESS","SSO_SILENT_FAILURE","None","LOGOUT_END","HANDLE_REDIRECT_END","LOGIN_SUCCESS","LOGIN_FAILURE","ACQUIRE_TOKEN_SUCCESS","ACQUIRE_TOKEN_FAILURE"],"sources":["/Users/sujal/Desktop/MSAL/msal-react-tutorial/node_modules/@azure/msal-browser/src/event/EventMessage.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, AuthError, AccountInfo } from \"@azure/msal-common\";\nimport { EventType } from \"./EventType\";\nimport { InteractionStatus, InteractionType } from \"../utils/BrowserConstants\";\nimport { PopupRequest, RedirectRequest, SilentRequest, SsoSilentRequest, EndSessionRequest } from \"..\";\n\nexport type EventMessage = {\n    eventType: EventType;\n    interactionType: InteractionType | null;\n    payload: EventPayload;\n    error: EventError;\n    timestamp: number;\n};\n\nexport type PopupEvent = {\n    popupWindow: Window;\n};\n\nexport type EventPayload = AccountInfo | PopupRequest | RedirectRequest | SilentRequest | SsoSilentRequest | EndSessionRequest | AuthenticationResult | PopupEvent | null;\n\nexport type EventError = AuthError | Error | null;\n\nexport type EventCallbackFunction = (message: EventMessage) => void;\n\nexport class EventMessageUtils {\n\n    /**\n     * Gets interaction status from event message\n     * @param message\n     * @param currentStatus\n     */\n    static getInteractionStatusFromEvent(message: EventMessage, currentStatus?: InteractionStatus): InteractionStatus|null {\n        switch (message.eventType) {\n            case EventType.LOGIN_START:\n                return InteractionStatus.Login;\n            case EventType.SSO_SILENT_START:\n                return InteractionStatus.SsoSilent;\n            case EventType.ACQUIRE_TOKEN_START:\n                if (message.interactionType === InteractionType.Redirect || message.interactionType === InteractionType.Popup) {\n                    return InteractionStatus.AcquireToken;\n                }\n                break;\n            case EventType.HANDLE_REDIRECT_START:\n                return InteractionStatus.HandleRedirect;\n            case EventType.LOGOUT_START:\n                return InteractionStatus.Logout;\n            case EventType.SSO_SILENT_SUCCESS:\n            case EventType.SSO_SILENT_FAILURE:\n                if (currentStatus && currentStatus !== InteractionStatus.SsoSilent) {\n                    // Prevent this event from clearing any status other than ssoSilent\n                    break;\n                }\n                return InteractionStatus.None;\n            case EventType.LOGOUT_END:\n                if (currentStatus && currentStatus !== InteractionStatus.Logout) {\n                    // Prevent this event from clearing any status other than logout\n                    break;\n                }\n                return InteractionStatus.None;\n            case EventType.HANDLE_REDIRECT_END:\n                if (currentStatus && currentStatus !== InteractionStatus.HandleRedirect) {\n                    // Prevent this event from clearing any status other than handleRedirect\n                    break;\n                }\n                return InteractionStatus.None;\n            case EventType.LOGIN_SUCCESS:\n            case EventType.LOGIN_FAILURE:\n            case EventType.ACQUIRE_TOKEN_SUCCESS:\n            case EventType.ACQUIRE_TOKEN_FAILURE:\n                if (message.interactionType === InteractionType.Redirect || message.interactionType === InteractionType.Popup) {\n                    if (currentStatus && currentStatus !== InteractionStatus.Login && currentStatus !== InteractionStatus.AcquireToken) {\n                        // Prevent this event from clearing any status other than login or acquireToken\n                        break;\n                    }\n                    return InteractionStatus.None;\n                }\n                break;\n            default:\n                break;\n        }\n        return null;\n    }\n}\n"],"mappings":";;;;;;AAAA;;;;;EA4BA,SAAAA,kBAAA,G;;;;;;EAOWA,iBAAA,CAAAC,6BAA6B,GAApC,UAAqCC,OAAqB,EAAEC,aAAiC;IACzF,QAAQD,OAAO,CAACE,SAAS;MACrB,KAAKC,SAAS,CAACC,WAAW;QACtB,OAAOC,iBAAiB,CAACC,KAAK;MAClC,KAAKH,SAAS,CAACI,gBAAgB;QAC3B,OAAOF,iBAAiB,CAACG,SAAS;MACtC,KAAKL,SAAS,CAACM,mBAAmB;QAC9B,IAAIT,OAAO,CAACU,eAAe,KAAKC,eAAe,CAACC,QAAQ,IAAIZ,OAAO,CAACU,eAAe,KAAKC,eAAe,CAACE,KAAK,EAAE;UAC3G,OAAOR,iBAAiB,CAACS,YAAY;;QAEzC;MACJ,KAAKX,SAAS,CAACY,qBAAqB;QAChC,OAAOV,iBAAiB,CAACW,cAAc;MAC3C,KAAKb,SAAS,CAACc,YAAY;QACvB,OAAOZ,iBAAiB,CAACa,MAAM;MACnC,KAAKf,SAAS,CAACgB,kBAAkB;MACjC,KAAKhB,SAAS,CAACiB,kBAAkB;QAC7B,IAAInB,aAAa,IAAIA,aAAa,KAAKI,iBAAiB,CAACG,SAAS,EAAE;;UAEhE;;QAEJ,OAAOH,iBAAiB,CAACgB,IAAI;MACjC,KAAKlB,SAAS,CAACmB,UAAU;QACrB,IAAIrB,aAAa,IAAIA,aAAa,KAAKI,iBAAiB,CAACa,MAAM,EAAE;;UAE7D;;QAEJ,OAAOb,iBAAiB,CAACgB,IAAI;MACjC,KAAKlB,SAAS,CAACoB,mBAAmB;QAC9B,IAAItB,aAAa,IAAIA,aAAa,KAAKI,iBAAiB,CAACW,cAAc,EAAE;;UAErE;;QAEJ,OAAOX,iBAAiB,CAACgB,IAAI;MACjC,KAAKlB,SAAS,CAACqB,aAAa;MAC5B,KAAKrB,SAAS,CAACsB,aAAa;MAC5B,KAAKtB,SAAS,CAACuB,qBAAqB;MACpC,KAAKvB,SAAS,CAACwB,qBAAqB;QAChC,IAAI3B,OAAO,CAACU,eAAe,KAAKC,eAAe,CAACC,QAAQ,IAAIZ,OAAO,CAACU,eAAe,KAAKC,eAAe,CAACE,KAAK,EAAE;UAC3G,IAAIZ,aAAa,IAAIA,aAAa,KAAKI,iBAAiB,CAACC,KAAK,IAAIL,aAAa,KAAKI,iBAAiB,CAACS,YAAY,EAAE;;YAEhH;;UAEJ,OAAOT,iBAAiB,CAACgB,IAAI;;QAEjC;IAAM;IAId,OAAO,IAAI;GACd;EACL,OAAAvB,iBAAC;AAAD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}