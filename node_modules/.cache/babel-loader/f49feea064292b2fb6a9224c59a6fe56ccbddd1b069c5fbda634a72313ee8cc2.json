{"ast":null,"code":"/*! @azure/msal-browser v2.34.0 2023-03-07 */\n'use strict';\n\nimport { StringUtils, ProtocolUtils, ClientAuthError, UrlString } from '@azure/msal-common';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar BrowserProtocolUtils = /** @class */function () {\n  function BrowserProtocolUtils() {}\n  /**\r\n   * Extracts the BrowserStateObject from the state string.\r\n   * @param browserCrypto\r\n   * @param state\r\n   */\n  BrowserProtocolUtils.extractBrowserRequestState = function (browserCrypto, state) {\n    if (StringUtils.isEmpty(state)) {\n      return null;\n    }\n    try {\n      var requestStateObj = ProtocolUtils.parseRequestState(browserCrypto, state);\n      return requestStateObj.libraryState.meta;\n    } catch (e) {\n      throw ClientAuthError.createInvalidStateError(state, e);\n    }\n  };\n  /**\r\n   * Parses properties of server response from url hash\r\n   * @param locationHash Hash from url\r\n   */\n  BrowserProtocolUtils.parseServerResponseFromHash = function (locationHash) {\n    if (!locationHash) {\n      return {};\n    }\n    var hashUrlString = new UrlString(locationHash);\n    return UrlString.getDeserializedHash(hashUrlString.getHash());\n  };\n  return BrowserProtocolUtils;\n}();\nexport { BrowserProtocolUtils };","map":{"version":3,"names":["BrowserProtocolUtils","extractBrowserRequestState","browserCrypto","state","StringUtils","isEmpty","requestStateObj","ProtocolUtils","parseRequestState","libraryState","meta","e","ClientAuthError","createInvalidStateError","parseServerResponseFromHash","locationHash","hashUrlString","UrlString","getDeserializedHash","getHash"],"sources":["/Users/sujal/Desktop/MSAL/msal-react-tutorial/node_modules/@azure/msal-browser/src/utils/BrowserProtocolUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { InteractionType } from \"./BrowserConstants\";\nimport { StringUtils, ClientAuthError, ICrypto, RequestStateObject, ProtocolUtils, ServerAuthorizationCodeResponse, UrlString } from \"@azure/msal-common\";\n\nexport type BrowserStateObject = {\n    interactionType: InteractionType\n};\n\nexport class BrowserProtocolUtils {\n\n    /**\n     * Extracts the BrowserStateObject from the state string.\n     * @param browserCrypto \n     * @param state \n     */\n    static extractBrowserRequestState(browserCrypto: ICrypto, state: string): BrowserStateObject | null {\n        if (StringUtils.isEmpty(state)) {\n            return null;\n        }\n\n        try {\n            const requestStateObj: RequestStateObject = ProtocolUtils.parseRequestState(browserCrypto, state);\n            return requestStateObj.libraryState.meta as BrowserStateObject;\n        } catch (e) {\n            throw ClientAuthError.createInvalidStateError(state, e);\n        }\n    }\n\n    /**\n     * Parses properties of server response from url hash\n     * @param locationHash Hash from url\n     */\n    static parseServerResponseFromHash(locationHash: string): ServerAuthorizationCodeResponse {\n        if (!locationHash) {\n            return {};\n        }\n        \n        const hashUrlString = new UrlString(locationHash);\n        return UrlString.getDeserializedHash(hashUrlString.getHash());\n    }\n}\n"],"mappings":";;;;;AAAA;;;;;EAYA,SAAAA,qBAAA,G;;;;;;EAOWA,oBAAA,CAAAC,0BAA0B,GAAjC,UAAkCC,aAAsB,EAAEC,KAAa;IACnE,IAAIC,WAAW,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;MAC5B,OAAO,IAAI;;IAGf,IAAI;MACA,IAAMG,eAAe,GAAuBC,aAAa,CAACC,iBAAiB,CAACN,aAAa,EAAEC,KAAK,CAAC;MACjG,OAAOG,eAAe,CAACG,YAAY,CAACC,IAA0B;KACjE,CAAC,OAAOC,CAAC,EAAE;MACR,MAAMC,eAAe,CAACC,uBAAuB,CAACV,KAAK,EAAEQ,CAAC,CAAC;;GAE9D;;;;;EAMMX,oBAAA,CAAAc,2BAA2B,GAAlC,UAAmCC,YAAoB;IACnD,IAAI,CAACA,YAAY,EAAE;MACf,OAAO,EAAE;;IAGb,IAAMC,aAAa,GAAG,IAAIC,SAAS,CAACF,YAAY,CAAC;IACjD,OAAOE,SAAS,CAACC,mBAAmB,CAACF,aAAa,CAACG,OAAO,EAAE,CAAC;GAChE;EACL,OAAAnB,oBAAC;AAAD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}